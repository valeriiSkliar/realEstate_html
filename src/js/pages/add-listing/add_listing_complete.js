// src/js/pages/add-listing-complete.js - –ü–æ–ª–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ñ–æ—Ä–º—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è

import "../../forms/index.js"; // –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏—Å—Ç–µ–º—É —Ñ–æ—Ä–º
import { AddListingEnhancements } from "./add_listing_enhancements.js";
import { initAddListingForm } from "./add_listing_integration.js";

/**
 * –ü–æ–ª–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
 */
class AddListingPageManager {
  constructor() {
    this.form = null;
    this.formManager = null;
    this.enhancements = null;

    this.init();
  }

  async init() {
    try {
      // –ñ–¥–µ–º –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ DOM
      if (document.readyState === "loading") {
        await new Promise((resolve) => {
          document.addEventListener("DOMContentLoaded", resolve);
        });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
      if (!document.querySelector(".add-listing-page")) {
        return;
      }

      console.log("üè† Initializing Add Listing Page...");

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ–æ—Ä–º—É
      this.formManager = initAddListingForm();
      this.form = document.getElementById("addListingForm");

      if (!this.form || !this.formManager) {
        throw new Error("Form or FormManager not found");
      }

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–∏—è
      this.enhancements = new AddListingEnhancements(this.form);

      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
      this.setupAdditionalHandlers();

      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
      this.setupPerformanceMonitoring();

      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É
      this.setupAnalytics();

      console.log("‚úÖ Add Listing Page initialized successfully");
    } catch (error) {
      console.error("‚ùå Error initializing Add Listing Page:", error);
      this.showErrorMessage(
        "–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ñ–æ—Ä–º—ã. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É."
      );
    }
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
   */
  setupAdditionalHandlers() {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ—Ç–µ—Ä–∏ –¥–∞–Ω–Ω—ã—Ö
    this.setupBeforeUnloadHandler();

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    this.setupAutoSave();

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏
    this.setupSessionRecovery();

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    this.setupImageHandling();
  }

  /**
   * –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
   */
  setupBeforeUnloadHandler() {
    let formChanged = false;

    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–µ
    this.form.addEventListener("input", () => {
      formChanged = true;
    });

    this.form.addEventListener("change", () => {
      formChanged = true;
    });

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ä–º—ã
    this.form.addEventListener("submit", () => {
      formChanged = false;
    });

    // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º –æ –ø–æ—Ç–µ—Ä–µ –¥–∞–Ω–Ω—ã—Ö
    window.addEventListener("beforeunload", (e) => {
      if (formChanged) {
        e.preventDefault();
        e.returnValue =
          "–£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è. –ü–æ–∫–∏–Ω—É—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É?";
        return e.returnValue;
      }
    });
  }

  /**
   * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã
   */
  setupAutoSave() {
    let autoSaveInterval;
    const AUTOSAVE_INTERVAL = 30000; // 30 —Å–µ–∫—É–Ω–¥

    const startAutoSave = () => {
      autoSaveInterval = setInterval(() => {
        this.autoSaveForm();
      }, AUTOSAVE_INTERVAL);
    };

    const stopAutoSave = () => {
      if (autoSaveInterval) {
        clearInterval(autoSaveInterval);
        autoSaveInterval = null;
      }
    };

    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏
    this.form.addEventListener(
      "input",
      () => {
        if (!autoSaveInterval) {
          startAutoSave();
        }
      },
      { once: true }
    );

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ä–º—ã
    this.form.addEventListener("submit", stopAutoSave);

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏ —É—Ö–æ–¥–µ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    window.addEventListener("beforeunload", stopAutoSave);
  }

  async autoSaveForm() {
    try {
      const formData = new FormData(this.form);
      const data = {};

      // –°–æ–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (–±–µ–∑ —Ñ–∞–π–ª–æ–≤)
      for (const [key, value] of formData.entries()) {
        if (key !== "imageUploadInput") {
          data[key] = value;
        }
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä –∫–∞–∫ —á–µ—Ä–Ω–æ–≤–∏–∫
      const response = await fetch("/api/listings/autosave", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "X-Requested-With": "XMLHttpRequest",
        },
        body: JSON.stringify({
          data,
          timestamp: Date.now(),
        }),
      });

      if (response.ok) {
        this.showAutoSaveIndicator();
      }
    } catch (error) {
      console.warn("Autosave failed:", error);
    }
  }

  showAutoSaveIndicator() {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ–Ω–∞–≤—è–∑—á–∏–≤—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    let indicator = document.querySelector(".autosave-indicator");

    if (!indicator) {
      indicator = document.createElement("div");
      indicator.className = "autosave-indicator";
      indicator.innerHTML = '<i class="bi bi-cloud-check"></i> –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ';
      document.body.appendChild(indicator);
    }

    indicator.style.display = "block";
    indicator.style.opacity = "1";

    setTimeout(() => {
      indicator.style.opacity = "0";
      setTimeout(() => {
        indicator.style.display = "none";
      }, 300);
    }, 2000);
  }

  /**
   * –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
   */
  setupSessionRecovery() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    this.checkForSavedSession();
  }

  async checkForSavedSession() {
    try {
      const response = await fetch("/api/listings/check-session", {
        method: "GET",
        headers: {
          "X-Requested-With": "XMLHttpRequest",
        },
      });

      if (response.ok) {
        const sessionData = await response.json();

        if (sessionData.hasSavedData) {
          this.showSessionRecoveryDialog(sessionData);
        }
      }
    } catch (error) {
      console.warn("Session check failed:", error);
    }
  }

  showSessionRecoveryDialog(sessionData) {
    const modal = document.createElement("div");
    modal.className = "modal fade";
    modal.innerHTML = `
      <div class="modal-dialog">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title">–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Å—Å–∏—é?</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
          </div>
          <div class="modal-body">
            <p>–ù–∞–π–¥–µ–Ω–∞ –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è —Ñ–æ—Ä–º–∞ –æ—Ç ${new Date(
              sessionData.timestamp
            ).toLocaleString()}.</p>
            <p>–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ?</p>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">–ù–µ—Ç</button>
            <button type="button" class="btn btn-primary" onclick="this.restoreSession()">–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å</button>
          </div>
        </div>
      </div>
    `;

    document.body.appendChild(modal);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    const bootstrapModal = new bootstrap.Modal(modal);
    bootstrapModal.show();

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    modal.querySelector(".btn-primary").onclick = () => {
      this.restoreSessionData(sessionData.data);
      bootstrapModal.hide();
      modal.remove();
    };

    // –£–¥–∞–ª—è–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è
    modal.addEventListener("hidden.bs.modal", () => {
      modal.remove();
    });
  }

  restoreSessionData(data) {
    Object.entries(data).forEach(([name, value]) => {
      const field = this.form.querySelector(`[name="${name}"]`);
      if (field) {
        if (field.type === "checkbox") {
          field.checked = value;
        } else {
          field.value = value;
        }

        // –¢—Ä–∏–≥–≥–µ—Ä–∏–º —Å–æ–±—ã—Ç–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
        field.dispatchEvent(new Event("input", { bubbles: true }));
        field.dispatchEvent(new Event("change", { bubbles: true }));
      }
    });

    this.showSuccessMessage("–î–∞–Ω–Ω—ã–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã");
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
   */
  setupImageHandling() {
    const fileInput = document.getElementById("imageUploadInput");

    if (fileInput) {
      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤
      fileInput.addEventListener("change", (e) => {
        this.validateImages(e.target.files);
      });

      // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É paste –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
      document.addEventListener("paste", (e) => {
        const items = e.clipboardData?.items;
        if (items) {
          for (const item of items) {
            if (item.type.startsWith("image/")) {
              const file = item.getAsFile();
              if (file) {
                this.addImageToInput(file);
              }
            }
          }
        }
      });
    }
  }

  validateImages(files) {
    const maxFiles = 10;
    const maxSize = 5 * 1024 * 1024; // 5MB
    const allowedTypes = ["image/jpeg", "image/png", "image/webp"];

    let validFiles = 0;
    let errors = [];

    Array.from(files).forEach((file) => {
      if (!allowedTypes.includes(file.type)) {
        errors.push(`${file.name}: –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç`);
      } else if (file.size > maxSize) {
        errors.push(`${file.name}: —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π`);
      } else {
        validFiles++;
      }
    });

    if (validFiles > maxFiles) {
      errors.push(`–ú–∞–∫—Å–∏–º—É–º ${maxFiles} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π`);
    }

    if (errors.length > 0) {
      this.showErrorMessage(`–û—à–∏–±–∫–∏ –≤ —Ñ–∞–π–ª–∞—Ö:\n${errors.join("\n")}`);
    }

    return errors.length === 0;
  }

  addImageToInput(file) {
    const fileInput = document.getElementById("imageUploadInput");
    const dt = new DataTransfer();

    // –î–æ–±–∞–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã
    Array.from(fileInput.files).forEach((f) => dt.items.add(f));

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª
    dt.items.add(file);

    fileInput.files = dt.files;

    // –¢—Ä–∏–≥–≥–µ—Ä–∏–º —Å–æ–±—ã—Ç–∏–µ change
    fileInput.dispatchEvent(new Event("change", { bubbles: true }));
  }

  /**
   * –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
   */
  setupPerformanceMonitoring() {
    // –ò–∑–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    performance.mark("form-init-complete");
    performance.measure(
      "form-initialization",
      "form-init-start",
      "form-init-complete"
    );

    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –≤—Ä–µ–º—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    this.form.addEventListener("submit", () => {
      performance.mark("form-validation-start");
    });

    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    const fileInput = document.getElementById("imageUploadInput");
    if (fileInput) {
      fileInput.addEventListener("change", () => {
        performance.mark("image-processing-start");

        setTimeout(() => {
          performance.mark("image-processing-end");
          performance.measure(
            "image-processing",
            "image-processing-start",
            "image-processing-end"
          );
        }, 100);
      });
    }
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
   */
  setupAnalytics() {
    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è —Ñ–æ—Ä–º—ã –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    const trackEvent = (action, label, value) => {
      if (window.gtag) {
        window.gtag("event", action, {
          event_category: "add_listing_form",
          event_label: label,
          value: value,
        });
      }
    };

    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –Ω–∞—á–∞–ª–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã
    this.form.addEventListener(
      "input",
      () => {
        trackEvent("form_start", "user_started_filling_form");
      },
      { once: true }
    );

    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
    let lastProgressPercent = 0;
    this.form.addEventListener("input", () => {
      const progress = this.calculateFormProgress();
      const progressPercent = Math.floor(progress / 10) * 10; // –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 10%

      if (progressPercent > lastProgressPercent && progressPercent >= 50) {
        trackEvent(
          "form_progress",
          `progress_${progressPercent}`,
          progressPercent
        );
        lastProgressPercent = progressPercent;
      }
    });

    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ä–º—ã
    this.form.addEventListener("submit", () => {
      trackEvent("form_submit", "form_submitted");
    });

    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    this.form.addEventListener(
      "invalid",
      (e) => {
        trackEvent("validation_error", e.target.name);
      },
      true
    );
  }

  calculateFormProgress() {
    const requiredFields = this.form.querySelectorAll("[required]");
    let filledFields = 0;

    requiredFields.forEach((field) => {
      if (field.type === "checkbox") {
        if (field.checked) filledFields++;
      } else if (field.value.trim() !== "") {
        filledFields++;
      }
    });

    return (filledFields / requiredFields.length) * 100;
  }

  /**
   * –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
   */
  showSuccessMessage(message) {
    if (window.createAndShowToast) {
      window.createAndShowToast(message, "success");
    } else {
      alert(message);
    }
  }

  showErrorMessage(message) {
    if (window.createAndShowToast) {
      window.createAndShowToast(message, "error");
    } else {
      alert(message);
    }
  }

  showInfoMessage(message) {
    if (window.createAndShowToast) {
      window.createAndShowToast(message, "info");
    } else {
      alert(message);
    }
  }

  /**
   * –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
   */
  getFormData() {
    return this.enhancements ? this.enhancements.getFormData() : null;
  }
}

export default AddListingPageManager;
