// –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è add_listing_integration.js –±–µ–∑ Select2
import {
  createAndShowToast,
  createForm,
  validators,
} from "../../forms/index.js";

/**
 * –°—Ö–µ–º–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è —Ñ–æ—Ä–º—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
 */
const addListingSchema = {
  // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
  propertyType: [validators.required("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞")],
  tradeType: [validators.required("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–¥–µ–ª–∫–∏")],
  propertyName: [
    validators.required("–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏—è"),
    validators.minLength(10, "–ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤"),
    validators.maxLength(100, "–ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 100 —Å–∏–º–≤–æ–ª–æ–≤"),
  ],

  // –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
  locality: [validators.required("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç")],
  address: [
    validators.required("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –æ–±—ä–µ–∫—Ç–∞"),
    validators.minLength(5, "–ê–¥—Ä–µ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π"),
  ],

  // –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
  propertyArea: [
    validators.required("–£–∫–∞–∂–∏—Ç–µ –ø–ª–æ—â–∞–¥—å –æ–±—ä–µ–∫—Ç–∞"),
    validators.min(1, "–ü–ª–æ—â–∞–¥—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0"),
    validators.max(10000, "–ü–ª–æ—â–∞–¥—å –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 10,000 –º¬≤"),
  ],
  // roomQuantity: [
  //   validators.custom((value, formData) => {
  //     const propertyType = formData.get("propertyType");
  //     // –î–ª—è –∫–≤–∞—Ä—Ç–∏—Ä –∏ –¥–æ–º–æ–≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
  //     if (["apartment", "house"].includes(propertyType)) {
  //       return value && parseInt(value) > 0;
  //     }
  //     return true;
  //   }, "–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç"),
  // ],
  floor: [
    validators.custom((value, formData) => {
      const propertyType = formData.get("propertyType");
      // –î–ª—è –∫–≤–∞—Ä—Ç–∏—Ä —ç—Ç–∞–∂ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
      if (propertyType === "apartment" && (!value || parseInt(value) < 1)) {
        return false;
      }
      return true;
    }, "–£–∫–∞–∂–∏—Ç–µ —ç—Ç–∞–∂ –¥–ª—è –∫–≤–∞—Ä—Ç–∏—Ä—ã"),
  ],

  // –¶–µ–Ω–∞
  price: [
    validators.required("–£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É"),
    validators.min(1, "–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0"),
    validators.max(1000000000, "–¶–µ–Ω–∞ —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∞—è"),
  ],

  // –û–ø–∏—Å–∞–Ω–∏–µ (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ, –Ω–æ –µ—Å–ª–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ - –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É)
  cleanDescription: [
    validators.custom((value) => {
      if (!value || value.trim() === "") return true; // –ü—É—Å—Ç–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ
      return value.length >= 50;
    }, "–û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤"),
    validators.maxLength(2000, "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 2000 —Å–∏–º–≤–æ–ª–æ–≤"),
  ],
};

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ–æ—Ä–º—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
 */
const addListingHandler = {
  async onSubmit(data, formData) {
    try {
      console.log("üìù –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã...", data);

      // –ò–º–∏—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä
      return new Promise((resolve) => {
        setTimeout(() => {
          console.log("‚úÖ –§–æ—Ä–º–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞");
          resolve({ success: true, listingId: 123 });
        }, 1000);
      });
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:", error);
      throw error;
    }
  },

  onSuccess(result) {
    console.log("üéâ –£—Å–ø–µ—Ö!", result);
    createAndShowToast("–û–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!", "success");
  },

  onError(errors) {
    console.log("‚ö†Ô∏è –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:", errors);
    createAndShowToast("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª–µ–π", "warning");
  },

  onServerError(errors) {
    console.log("üí• –°–µ—Ä–≤–µ—Ä–Ω—ã–µ –æ—à–∏–±–∫–∏:", errors);
    createAndShowToast("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", "danger");
  },
};

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Å–ª–æ–≤–Ω—ã—Ö –ø–æ–ª–µ–π
 */
function setupConditionalFields(form) {
  const propertyTypeSelect = form.querySelector("#propertyType");
  const roomQuantityField = form.querySelector("#roomQuantity");
  const floorField = form.querySelector("#floor");

  if (!propertyTypeSelect) {
    console.warn("–ü–æ–ª–µ propertyType –Ω–µ –Ω–∞–π–¥–µ–Ω–æ");
    return;
  }

  const roomQuantityContainer = roomQuantityField?.closest(".form-field");
  const floorContainer = floorField?.closest(".form-field");

  const toggleFields = () => {
    const propertyType = propertyTypeSelect.value;

    // –ü–æ–ª–µ "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç"
    if (roomQuantityContainer) {
      if (["apartment", "house"].includes(propertyType)) {
        roomQuantityContainer.style.display = "block";
        if (roomQuantityField) roomQuantityField.required = true;
      } else {
        roomQuantityContainer.style.display = "none";
        if (roomQuantityField) {
          roomQuantityField.required = false;
          roomQuantityField.value = "";
        }
      }
    }

    // –ü–æ–ª–µ "–≠—Ç–∞–∂"
    if (floorContainer) {
      if (propertyType === "apartment") {
        floorContainer.style.display = "block";
        if (floorField) floorField.required = true;
      } else {
        floorContainer.style.display = "none";
        if (floorField) {
          floorField.required = false;
          floorField.value = "";
        }
      }
    }
  };

  propertyTypeSelect.addEventListener("change", toggleFields);
  toggleFields(); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
}

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–µ–≤—å—é —Ñ–∞–π–ª–æ–≤
 */
function setupFileUpload(form) {
  const fileInput = form.querySelector("#imageUploadInput");
  const previewContainer = form.querySelector("#imagePreviews");

  if (!fileInput || !previewContainer) {
    console.warn("–≠–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã");
    return;
  }

  fileInput.addEventListener("change", (e) => {
    const files = e.target.files;
    previewContainer.innerHTML = "";

    if (files.length === 0) return;

    Array.from(files).forEach((file, index) => {
      if (file.type.startsWith("image/")) {
        const reader = new FileReader();
        reader.onload = (e) => {
          const preview = document.createElement("div");
          preview.className = "image-preview d-inline-block me-2 mb-2";
          preview.innerHTML = `
            <img src="${e.target.result}" 
                 style="width: 80px; height: 80px; object-fit: cover; border-radius: 4px; border: 1px solid #ddd;">
            <small class="d-block text-muted text-center mt-1" style="font-size: 10px;">
              ${
                file.name.length > 15
                  ? file.name.substring(0, 12) + "..."
                  : file.name
              }
            </small>
          `;
          previewContainer.appendChild(preview);
        };
        reader.readAsDataURL(file);
      }
    });
  });
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–æ—Ä–º—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
 */
export const initAddListingForm = () => {
  const form = document.getElementById("addListingForm");

  if (!form) {
    console.warn("‚ùå Add listing form not found");
    return null;
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–∞ –ª–∏ —Ñ–æ—Ä–º–∞ —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞
  if (form.dataset.initialized === "true") {
    console.warn("‚ö†Ô∏è Add listing form already initialized");
    return form.formManager;
  }

  console.log("üöÄ Initializing add listing form...");

  try {
    // –°–æ–∑–¥–∞–µ–º FormManager
    const formManager = createForm(form, addListingSchema, {
      onSubmit: addListingHandler.onSubmit.bind(addListingHandler),
      onSuccess: addListingHandler.onSuccess,
      onError: addListingHandler.onError,
      onServerError: addListingHandler.onServerError,
      validateOnBlur: true,
      validateOnChange: false,
      scrollToError: true,
    });

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É
    setupConditionalFields(form);
    setupFileUpload(form);

    // –û—Ç–º–µ—á–∞–µ–º —á—Ç–æ —Ñ–æ—Ä–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞
    form.dataset.initialized = "true";
    form.formManager = formManager;

    console.log("‚úÖ Add listing form initialized successfully");
    return formManager;
  } catch (error) {
    console.error("‚ùå Error initializing form:", error);
    return null;
  }
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener("DOMContentLoaded", () => {
  console.log("üìÑ DOM loaded, checking for add-listing-page...");

  if (document.querySelector(".add-listing-page")) {
    console.log("üè† Add listing page found, initializing form...");
    setTimeout(() => {
      initAddListingForm();
    }, 100);
  } else {
    console.log("üîç Add listing page not found");
  }
});

export default {
  initAddListingForm,
  addListingSchema,
  addListingHandler,
};
