import {
  createAndShowToast,
  createForm,
  validators,
} from "../../forms/index.js";

/**
 * –°—Ö–µ–º–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (—Ç–∞ –∂–µ —á—Ç–æ –∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è)
 */
const editListingSchema = {
  propertyType: [validators.required("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞")],
  tradeType: [validators.required("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–¥–µ–ª–∫–∏")],
  propertyName: [
    validators.required("–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏—è"),
    validators.minLength(10, "–ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤"),
  ],
  locality: [validators.required("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç")],
  address: [validators.required("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –æ–±—ä–µ–∫—Ç–∞")],
  propertyArea: [
    validators.required("–£–∫–∞–∂–∏—Ç–µ –ø–ª–æ—â–∞–¥—å –æ–±—ä–µ–∫—Ç–∞"),
    validators.min(1, "–ü–ª–æ—â–∞–¥—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0"),
    validators.max(10000, "–ü–ª–æ—â–∞–¥—å –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 10,000 –º¬≤"),
  ],
  price: [
    validators.required("–£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É"),
    validators.min(1, "–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0"),
  ],
};

/**
 * –ò–º–∏—Ç–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã –¥–ª—è –ø—Ä–µ–¥–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã
 */
const mockListingData = {
  id: 123,
  propertyType: "apartment",
  tradeType: "sale", 
  propertyName: "–£—é—Ç–Ω–∞—è 2-–∫–æ–º–Ω–∞—Ç–Ω–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞ –≤ —Ü–µ–Ω—Ç—Ä–µ –≥–æ—Ä–æ–¥–∞",
  locality: "krasnodar",
  district: "center",
  address: "—É–ª. –ö—Ä–∞—Å–Ω–∞—è, 123",
  propertyArea: "65.5",
  floor: "5",
  condition: "euro-renovation",
  price: "4500000",
  cleanDescription: "–û—Ç–ª–∏—á–Ω–∞—è 2-–∫–æ–º–Ω–∞—Ç–Ω–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞ –≤ —Å–∞–º–æ–º —Ü–µ–Ω—Ç—Ä–µ –≥–æ—Ä–æ–¥–∞. –ö–≤–∞—Ä—Ç–∏—Ä–∞ –ø–æ—Å–ª–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –µ–≤—Ä–æ—Ä–µ–º–æ–Ω—Ç–∞, —Å–æ –≤—Å–µ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π –º–µ–±–µ–ª—å—é –∏ —Ç–µ—Ö–Ω–∏–∫–æ–π. –ë–æ–ª—å—à–∏–µ —Å–≤–µ—Ç–ª—ã–µ –∫–æ–º–Ω–∞—Ç—ã, –ø—Ä–æ—Å—Ç–æ—Ä–Ω–∞—è –∫—É—Ö–Ω—è-–≥–æ—Å—Ç–∏–Ω–∞—è. –í –¥–æ–º–µ –µ—Å—Ç—å –ª–∏—Ñ—Ç, –æ—Ö—Ä–∞–Ω–∞ –∏ –ø–æ–¥–∑–µ–º–Ω–∞—è –ø–∞—Ä–∫–æ–≤–∫–∞. –†—è–¥–æ–º –ø–∞—Ä–∫, —à–∫–æ–ª—ã, –¥–µ—Ç—Å–∫–∏–µ —Å–∞–¥—ã, –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞. –û—Ç–ª–∏—á–Ω–æ–µ –º–µ—Å—Ç–æ –¥–ª—è –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–π –∂–∏–∑–Ω–∏ –≤ —Ü–µ–Ω—Ç—Ä–µ –≥–æ—Ä–æ–¥–∞.",
  building_elevator: true,
  building_parking: true,
  building_security: true,
  status: "published"
};

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Å–ª–æ–≤–Ω—ã—Ö –ø–æ–ª–µ–π (—Ç–∞ –∂–µ –ª–æ–≥–∏–∫–∞)
 */
function setupConditionalFields(form) {
  const propertyTypeSelect = form.querySelector("#propertyType");
  const floorField = form.querySelector("#floor");

  if (!propertyTypeSelect) return;

  const floorContainer = floorField?.closest(".form-field");

  const toggleFields = () => {
    const propertyType = propertyTypeSelect.value;

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–µ "–≠—Ç–∞–∂" —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–≤–∞—Ä—Ç–∏—Ä
    if (floorContainer) {
      if (propertyType === "apartment") {
        floorContainer.style.display = "block";
        if (floorField) floorField.required = true;
      } else {
        floorContainer.style.display = "none";
        if (floorField) {
          floorField.required = false;
          floorField.value = "";
        }
      }
    }
  };

  propertyTypeSelect.addEventListener("change", toggleFields);
  toggleFields();
}

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ (—Ç–∞ –∂–µ –ª–æ–≥–∏–∫–∞)
 */
function setupFileUpload(form) {
  const fileInput = form.querySelector("#imageUploadInput");
  const fileLabel = form.querySelector('label[for="imageUploadInput"]');
  const previewContainer = form.querySelector("#imagePreviews");

  console.log("setupFileUpload:", { fileInput, fileLabel, previewContainer });

  if (!fileInput) {
    console.warn("–ü–æ–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ");
    return;
  }

  // –ï—Å–ª–∏ –Ω–µ—Ç label, —Å–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ –∫–Ω–æ–ø–∫—É
  const uploadButton = form.querySelector(".form-file-button");
  if (uploadButton) {
    uploadButton.addEventListener("click", (e) => {
      e.preventDefault();
      fileInput.click();
    });
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
  fileInput.addEventListener("change", (e) => {
    console.log("Files selected:", e.target.files);

    if (!previewContainer) return;

    const files = e.target.files;
    
    if (files.length === 0) return;

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º
    Array.from(files).forEach((file, index) => {
      const fileItem = document.createElement("div");
      fileItem.className = "selected-file d-flex align-items-center mb-2";

      if (file.type.startsWith("image/")) {
        const reader = new FileReader();
        reader.onload = (e) => {
          fileItem.innerHTML = `
            <img src="${e.target.result}" 
                 style="width: 60px; height: 60px; object-fit: cover; border-radius: 4px; margin-right: 10px;">
            <div>
              <div class="fw-bold">${file.name}</div>
              <div class="text-muted small">${(file.size / 1024).toFixed(1)} KB</div>
            </div>
          `;
        };
        reader.readAsDataURL(file);
      } else {
        fileItem.innerHTML = `
          <div class="file-icon me-2">üìÑ</div>
          <div>
            <div class="fw-bold">${file.name}</div>
            <div class="text-muted small">${(file.size / 1024).toFixed(1)} KB</div>
          </div>
        `;
      }

      previewContainer.appendChild(fileItem);
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —Ñ–∞–π–ª–æ–≤
    const totalFiles = previewContainer.querySelectorAll('.selected-file').length;
    const placeholderText = form.querySelector(".form-file-placeholder");
    if (placeholderText) {
      placeholderText.textContent = `–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${totalFiles}`;
    }
  });

  // Drag & Drop
  const fileArea = form.querySelector(".form-file");
  if (fileArea) {
    fileArea.addEventListener("dragover", (e) => {
      e.preventDefault();
      fileArea.classList.add("drag-over");
    });

    fileArea.addEventListener("dragleave", () => {
      fileArea.classList.remove("drag-over");
    });

    fileArea.addEventListener("drop", (e) => {
      e.preventDefault();
      fileArea.classList.remove("drag-over");

      const files = e.dataTransfer.files;
      fileInput.files = files;
      fileInput.dispatchEvent(new Event("change"));
    });
  }
}

/**
 * –ü—Ä–µ–¥–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –¥–∞–Ω–Ω—ã–º–∏
 */
function populateFormWithData(form, data) {
  console.log("üîß –ü—Ä–µ–¥–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –¥–∞–Ω–Ω—ã–º–∏:", data);

  Object.entries(data).forEach(([fieldName, value]) => {
    const field = form.querySelector(`[name="${fieldName}"]`);
    
    if (!field) return;

    if (field.type === "checkbox") {
      field.checked = Boolean(value);
    } else if (field.type === "radio") {
      const radioButton = form.querySelector(`[name="${fieldName}"][value="${value}"]`);
      if (radioButton) radioButton.checked = true;
    } else if (field.tagName === "SELECT") {
      field.value = value;
      // –¢—Ä–∏–≥–≥–µ—Ä–∏–º —Å–æ–±—ã—Ç–∏–µ change –¥–ª—è select2
      if (field.hasAttribute("data-select2")) {
        field.dispatchEvent(new Event("change"));
      }
    } else {
      field.value = value;
    }
  });

  console.log("‚úÖ –§–æ—Ä–º–∞ –ø—Ä–µ–¥–∑–∞–ø–æ–ª–Ω–µ–Ω–∞");
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
 */
const editListingHandler = {
  async onSubmit(data, formData) {
    console.log("üìù –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π...", data);

    // –ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    return new Promise((resolve) => {
      setTimeout(() => {
        console.log("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã");
        resolve({ success: true, listingId: mockListingData.id });
      }, 1500);
    });
  },

  onSuccess(result) {
    console.log("üéâ –£—Å–ø–µ—Ö!", result);
    createAndShowToast("–ò–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!", "success");
  },

  onError(errors) {
    console.log("‚ö†Ô∏è –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:", errors);

    // –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤–æ–µ –ø–æ–ª–µ —Å –æ—à–∏–±–∫–æ–π –∏ —Ñ–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –Ω–∞ –Ω–µ–º
    const firstErrorField = Object.keys(errors)[0];
    if (firstErrorField) {
      const field = document.querySelector(`[name="${firstErrorField}"]`);
      if (field) {
        field.focus();
        field.scrollIntoView({ behavior: "smooth", block: "center" });
      }
    }

    createAndShowToast("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è", "warning");
  },
};

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
 */
function setupAdditionalButtons(form) {
  // –ö–Ω–æ–ø–∫–∞ "–°–Ω—è—Ç—å —Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"
  const unpublishBtn = form.querySelector("#unpublishBtn");
  if (unpublishBtn) {
    unpublishBtn.addEventListener("click", async () => {
      console.log("üì§ –°–Ω—è—Ç–∏–µ —Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏...");
      
      // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞
      unpublishBtn.disabled = true;
      unpublishBtn.innerHTML = '<span class="spinner-border spinner-border-sm me-2"></span>–°–Ω–∏–º–∞–µ–º...';
      
      setTimeout(() => {
        unpublishBtn.disabled = false;
        unpublishBtn.innerHTML = '<i class="bi bi-eye-slash me-2"></i>–°–Ω—è—Ç—å —Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏';
        createAndShowToast("–û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å–Ω—è—Ç–æ —Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏", "info");
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ UI
        const statusBadge = document.querySelector(".listing-status .badge");
        if (statusBadge) {
          statusBadge.className = "badge bg-secondary";
          statusBadge.textContent = "–°–Ω—è—Ç–æ —Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏";
        }
      }, 1000);
    });
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ —á–µ—Ä–Ω–æ–≤–∏–∫"
  const saveAsDraftBtn = form.querySelector("#saveAsDraftBtn");
  if (saveAsDraftBtn) {
    saveAsDraftBtn.addEventListener("click", () => {
      createAndShowToast("–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∫–∞–∫ —á–µ—Ä–Ω–æ–≤–∏–∫", "info");
    });
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
export const initEditListingForm = () => {
  const form = document.getElementById("addListingForm");

  if (!form) {
    console.warn("‚ùå –§–æ—Ä–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
    return null;
  }

  if (form.dataset.initialized === "true") {
    console.warn("‚ö†Ô∏è –§–æ—Ä–º–∞ —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞");
    return form.formManager;
  }

  console.log("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–æ—Ä–º—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...");

  try {
    // –ü—Ä–µ–¥–∑–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –¥–∞–Ω–Ω—ã–º–∏
    populateFormWithData(form, mockListingData);

    // –°–æ–∑–¥–∞–µ–º FormManager
    const formManager = createForm(form, editListingSchema, {
      onSubmit: editListingHandler.onSubmit,
      onSuccess: editListingHandler.onSuccess,
      onError: editListingHandler.onError,
      validateOnBlur: true,
      validateOnChange: true,
    });

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É
    setupConditionalFields(form);
    setupFileUpload(form);
    setupAdditionalButtons(form);

    form.dataset.initialized = "true";
    form.formManager = formManager;

    console.log("‚úÖ –§–æ—Ä–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞");
    return formManager;
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:", error);
    return null;
  }
};

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
 */
document.addEventListener("DOMContentLoaded", () => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º URL –∏–ª–∏ –Ω–∞–ª–∏—á–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const isEditPage = window.location.pathname.includes('listings-edit') || 
                     document.querySelector('.edit-listing-page') ||
                     (document.querySelector('.add-listing-page') && window.location.search.includes('edit'));
  
  if (isEditPage) {
    console.log("‚úèÔ∏è –ù–∞–π–¥–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è");
    setTimeout(() => {
      initEditListingForm();
    }, 100);
  }
});

export default {
  initEditListingForm,
  editListingSchema,
  editListingHandler,
  mockListingData,
};