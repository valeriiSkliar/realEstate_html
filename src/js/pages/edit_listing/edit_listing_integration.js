import { createForm, validators } from "../../forms/index.js";
import { createAndShowToast } from "../../utils/uiHelpers.js";

/**
 * –°—Ö–µ–º–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (—Ç–∞ –∂–µ —á—Ç–æ –∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è)
 */
const editListingSchema = {
  propertyType: [validators.required("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞")],
  tradeType: [validators.required("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–¥–µ–ª–∫–∏")],
  locality: [validators.required("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç")],
  address: [validators.required("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –æ–±—ä–µ–∫—Ç–∞")],
  propertyArea: [
    // –£—Å–ª–æ–≤–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è - –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∫—Ä–æ–º–µ –∑–µ–º–µ–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–∫–æ–≤
    {
      validate: (value, formData) => {
        const propertyType = formData.get("propertyType");
        if (propertyType === "land") return true;
        return validators.required("–£–∫–∞–∂–∏—Ç–µ –ø–ª–æ—â–∞–¥—å –æ–±—ä–µ–∫—Ç–∞").validate(value);
      },
    },
    {
      validate: (value, formData) => {
        const propertyType = formData.get("propertyType");
        if (propertyType === "land" || !value || value.trim() === "")
          return true;
        return validators
          .min(1, "–ü–ª–æ—â–∞–¥—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
          .validate(value);
      },
    },
    {
      validate: (value, formData) => {
        const propertyType = formData.get("propertyType");
        if (propertyType === "land" || !value || value.trim() === "")
          return true;
        return validators
          .max(10000, "–ü–ª–æ—â–∞–¥—å –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 10,000 –º¬≤")
          .validate(value);
      },
    },
  ],
  landArea: [
    // –£—Å–ª–æ–≤–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è - –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –∑–µ–º–µ–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–∫–æ–≤
    {
      validate: (value, formData) => {
        const propertyType = formData.get("propertyType");
        if (propertyType !== "land") return true;
        return validators.required("–£–∫–∞–∂–∏—Ç–µ –ø–ª–æ—â–∞–¥—å —É—á–∞—Å—Ç–∫–∞").validate(value);
      },
    },
    {
      validate: (value, formData) => {
        const propertyType = formData.get("propertyType");
        if (propertyType !== "land" || !value || value.trim() === "")
          return true;
        return validators
          .min(0.01, "–ü–ª–æ—â–∞–¥—å —É—á–∞—Å—Ç–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
          .validate(value);
      },
    },
    {
      validate: (value, formData) => {
        const propertyType = formData.get("propertyType");
        if (propertyType !== "land" || !value || value.trim() === "")
          return true;
        return validators
          .max(1000, "–ü–ª–æ—â–∞–¥—å —É—á–∞—Å—Ç–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 1000 —Å–æ—Ç–æ–∫")
          .validate(value);
      },
    },
  ],
  price: [
    validators.required("–£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É"),
    validators.min(1, "–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0"),
  ],
};

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Å–ª–æ–≤–Ω—ã—Ö –ø–æ–ª–µ–π
 */
function setupConditionalFields(form) {
  const propertyTypeSelect = form.querySelector("#propertyType");
  const floorField = form.querySelector("#floor");
  const propertyAreaField = form.querySelector("#propertyArea");
  const landAreaField = form.querySelector("#landArea");

  if (!propertyTypeSelect) return;

  const floorContainer = floorField?.closest(".form-field");
  const propertyAreaContainer = propertyAreaField?.closest(".form-field");
  const landAreaContainer = landAreaField?.closest(".form-field");

  const toggleFields = () => {
    const propertyType = propertyTypeSelect.value;

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–µ "–≠—Ç–∞–∂" —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–≤–∞—Ä—Ç–∏—Ä
    if (floorContainer) {
      if (propertyType === "apartment") {
        floorContainer.style.display = "block";
        if (floorField) floorField.required = true;
      } else {
        floorContainer.style.display = "none";
        if (floorField) {
          floorField.required = false;
          floorField.value = "";
        }
      }
    }

    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è–º–∏ –ø–ª–æ—â–∞–¥–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
    if (propertyAreaContainer && landAreaContainer) {
      if (propertyType === "land") {
        // –î–ª—è –∑–µ–º–µ–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–∫–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ª–µ –ø–ª–æ—â–∞–¥–∏ —É—á–∞—Å—Ç–∫–∞
        propertyAreaContainer.style.display = "none";
        landAreaContainer.style.display = "block";

        if (propertyAreaField) {
          propertyAreaField.required = false;
          propertyAreaField.value = "";
        }
        if (landAreaField) {
          landAreaField.required = true;
        }
      } else {
        // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–ª–æ—â–∞–¥—å –æ–±—ä–µ–∫—Ç–∞, —Å–∫—Ä—ã–≤–∞–µ–º —É—á–∞—Å—Ç–æ–∫
        propertyAreaContainer.style.display = "block";
        landAreaContainer.style.display = "none";

        if (propertyAreaField) {
          propertyAreaField.required = true;
        }
        if (landAreaField) {
          landAreaField.required = false;
          landAreaField.value = "";
        }
      }
    }
  };

  propertyTypeSelect.addEventListener("change", toggleFields);
  toggleFields();
}

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
 */
function setupFileUpload(form) {
  const fileInput = form.querySelector("#imageUploadInput");
  const previewContainer = form.querySelector("#imagePreviews");

  console.log("setupFileUpload:", { fileInput, previewContainer });

  if (!fileInput) {
    console.warn("–ü–æ–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ");
    return;
  }

  // –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
  let selectedFiles = [];

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ FileList
  function createFileList(files) {
    const dt = new DataTransfer();
    files.forEach((file) => dt.items.add(file));
    return dt.files;
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–µ–≤—å—é —Ñ–∞–π–ª–æ–≤
  function updatePreview() {
    if (!previewContainer) return;

    previewContainer.innerHTML = "";

    if (selectedFiles.length === 0) {
      previewContainer.innerHTML =
        '<div class="text-muted">–§–∞–π–ª—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã</div>';
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
      const placeholderText = form.querySelector(".form-file-placeholder");
      if (placeholderText) {
        placeholderText.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π";
      }
      return;
    }

    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    selectedFiles.forEach((file, index) => {
      const fileItem = document.createElement("div");
      fileItem.className =
        "selected-file d-flex align-items-center mb-2 p-2 border rounded";
      fileItem.style.position = "relative";

      // –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
      const deleteBtn = document.createElement("button");
      deleteBtn.type = "button";
      deleteBtn.className = "btn btn-sm btn-outline-danger ms-auto";
      deleteBtn.innerHTML = '<i class="bi bi-x"></i>';
      deleteBtn.title = "–£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª";
      deleteBtn.style.minWidth = "32px";

      deleteBtn.addEventListener("click", () => {
        removeFile(index);
      });

      if (file.type.startsWith("image/")) {
        const reader = new FileReader();
        reader.onload = (e) => {
          fileItem.innerHTML = `
            <img src="${e.target.result}" 
                 style="width: 60px; height: 60px; object-fit: cover; border-radius: 4px; margin-right: 10px;">
            <div class="flex-grow-1">
              <div class="fw-bold">${file.name}</div>
              <div class="text-muted small">${(file.size / 1024).toFixed(
                1
              )} KB</div>
            </div>
          `;
          fileItem.appendChild(deleteBtn);
        };
        reader.readAsDataURL(file);
      } else {
        fileItem.innerHTML = `
          <div class="file-icon me-2">üìÑ</div>
          <div class="flex-grow-1">
            <div class="fw-bold">${file.name}</div>
            <div class="text-muted small">${(file.size / 1024).toFixed(
              1
            )} KB</div>
          </div>
        `;
        fileItem.appendChild(deleteBtn);
      }

      previewContainer.appendChild(fileItem);
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
    const placeholderText = form.querySelector(".form-file-placeholder");
    if (placeholderText) {
      placeholderText.textContent = `–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${selectedFiles.length}`;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º FileList –≤ input
    fileInput.files = createFileList(selectedFiles);
  }

  // –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞
  function removeFile(index) {
    selectedFiles.splice(index, 1);
    updatePreview();
    console.log(`–§–∞–π–ª —É–¥–∞–ª–µ–Ω. –û—Å—Ç–∞–ª–æ—Å—å —Ñ–∞–π–ª–æ–≤: ${selectedFiles.length}`);
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
  function addFiles(newFiles) {
    Array.from(newFiles).forEach((file) => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Ñ–∞–π–ª
      const isDuplicate = selectedFiles.some(
        (existingFile) =>
          existingFile.name === file.name &&
          existingFile.size === file.size &&
          existingFile.lastModified === file.lastModified
      );

      if (!isDuplicate) {
        selectedFiles.push(file);
      }
    });
    updatePreview();
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –Ω–∞ –∫–Ω–æ–ø–∫—É –∑–∞–≥—Ä—É–∑–∫–∏
  const uploadButton = form.querySelector(".form-file-button");
  if (uploadButton) {
    uploadButton.addEventListener("click", (e) => {
      e.preventDefault();
      fileInput.click();
    });
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
  fileInput.addEventListener("change", (e) => {
    console.log("Files selected:", e.target.files);

    if (e.target.files.length > 0) {
      addFiles(e.target.files);
    }
  });

  // Drag & Drop
  const fileArea = form.querySelector(".form-file");
  if (fileArea) {
    fileArea.addEventListener("dragover", (e) => {
      e.preventDefault();
      fileArea.classList.add("drag-over");
    });

    fileArea.addEventListener("dragleave", () => {
      fileArea.classList.remove("drag-over");
    });

    fileArea.addEventListener("drop", (e) => {
      e.preventDefault();
      fileArea.classList.remove("drag-over");

      const files = e.dataTransfer.files;
      if (files.length > 0) {
        addFiles(files);
      }
    });
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–µ–≤—å—é
  updatePreview();
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
 */
const editListingHandler = {
  async onSubmit(data, formData) {
    console.log("üìù –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π...", data);

    // –ü–æ–ª—É—á–∞–µ–º URL –∏–∑ –∞—Ç—Ä–∏–±—É—Ç–∞ data-action-url —Ñ–æ—Ä–º—ã
    const form = document.getElementById("addListingForm");
    const actionUrl = form?.getAttribute("data-action-url");

    if (!actionUrl) {
      throw new Error(
        "URL –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∞—Ç—Ä–∏–±—É—Ç–µ data-action-url"
      );
    }

    try {
      const response = await fetch(actionUrl, {
        method: "POST",
        body: formData,
      });

      if (!response.ok) {
        // –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –æ—à–∏–±–∫—É –¥–ª—è HTTP —Å—Ç–∞—Ç—É—Å–æ–≤
        const error = new Error(`HTTP error! status: ${response.status}`);
        error.isNetworkError = true;
        error.status = response.status;
        error.statusText = response.statusText;
        throw error;
      }

      return await response.json();
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö:", error);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Å–µ—Ç–µ–≤–æ–π –æ—à–∏–±–∫–æ–π
      if (
        error.isNetworkError ||
        error.name === "TypeError" ||
        error.message.includes("fetch")
      ) {
        error.isNetworkError = true;
      }

      throw error;
    }
  },

  onSuccess(result) {
    console.log("üéâ –£—Å–ø–µ—Ö!", result);
    // createAndShowToast("–ò–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!", "success");
    window.location.href = this.form.getAttribute("data-success-url");
  },

  onError(errors) {
    console.log("‚ö†Ô∏è –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:", errors);

    // –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤–æ–µ –ø–æ–ª–µ —Å –æ—à–∏–±–∫–æ–π –∏ —Ñ–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –Ω–∞ –Ω–µ–º
    const firstErrorField = Object.keys(errors)[0];
    if (firstErrorField) {
      const field = document.querySelector(`[name="${firstErrorField}"]`);
      if (field) {
        field.focus();
        field.scrollIntoView({ behavior: "smooth", block: "center" });
      }
    }

    createAndShowToast("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è", "warning");
  },

  onNetworkError(error) {
    console.log("üåê –û—à–∏–±–∫–∞ —Å–µ—Ç–∏:", error);

    let message = "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã";

    if (error.status === 404) {
      message = "–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É";
    } else if (error.status === 500) {
      message = "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ";
    } else if (error.status === 403) {
      message = "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω";
    } else if (error.status === 422) {
      message = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã";
    } else if (error.name === "TypeError" || error.message.includes("fetch")) {
      message = "–ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ —Å–µ—Ä–≤–µ—Ä—É";
    }

    createAndShowToast(message, "danger");
  },
};

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
 */
function setupAdditionalButtons(form) {
  // –ö–Ω–æ–ø–∫–∞ "–í –∞—Ä—Ö–∏–≤" (–±—ã–≤—à–∞—è "–°–Ω—è—Ç—å —Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
  const unpublishBtn = form.querySelector("#unpublishBtn");
  if (unpublishBtn) {
    unpublishBtn.addEventListener("click", async () => {
      console.log("üì§ –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤ –∞—Ä—Ö–∏–≤...");

      // –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ —Å–µ—Ä–≤–µ—Ä—É
      createAndShowToast("–§—É–Ω–∫—Ü–∏—è –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞", "info");
    });
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ —á–µ—Ä–Ω–æ–≤–∏–∫"
  const saveAsDraftBtn = form.querySelector("#saveAsDraftBtn");
  if (saveAsDraftBtn) {
    saveAsDraftBtn.addEventListener("click", () => {
      createAndShowToast("–§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–µ—Ä–Ω–æ–≤–∏–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞", "info");
    });
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
export const initEditListingForm = () => {
  const form = document.getElementById("addListingForm");

  if (!form) {
    console.warn("‚ùå –§–æ—Ä–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
    return null;
  }

  if (form.dataset.initialized === "true") {
    console.warn("‚ö†Ô∏è –§–æ—Ä–º–∞ —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞");
    return form.formManager;
  }

  console.log("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–æ—Ä–º—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...");

  try {
    // –°–æ–∑–¥–∞–µ–º FormManager
    const formManager = createForm(form, editListingSchema, {
      onSubmit: editListingHandler.onSubmit,
      onSuccess: editListingHandler.onSuccess,
      onError: editListingHandler.onError,
      onNetworkError: editListingHandler.onNetworkError,
      validateOnBlur: true,
      validateOnChange: true,
    });

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É
    setupConditionalFields(form);
    setupFileUpload(form);
    setupAdditionalButtons(form);

    form.dataset.initialized = "true";
    form.formManager = formManager;

    console.log("‚úÖ –§–æ—Ä–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞");
    return formManager;
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:", error);
    return null;
  }
};

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
 */
document.addEventListener("DOMContentLoaded", () => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º URL –∏–ª–∏ –Ω–∞–ª–∏—á–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const isEditPage =
    window.location.pathname.includes("listings-edit") ||
    document.querySelector(".edit-listing-page") ||
    (document.querySelector(".add-listing-page") &&
      window.location.search.includes("edit"));

  if (isEditPage) {
    console.log("‚úèÔ∏è –ù–∞–π–¥–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è");
    setTimeout(() => {
      initEditListingForm();
    }, 100);
  }
});

export default {
  initEditListingForm,
  editListingSchema,
  editListingHandler,
};
