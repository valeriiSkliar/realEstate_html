/**
 * –ú–æ–¥—É–ª—å –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
 * –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º –Ω–∞ Android —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
 */

class FileUploadLogger {
  constructor(context = "FileUpload") {
    this.context = context;
    this.startTime = Date.now();
    this.events = [];
    this.platform = this.detectPlatform();

    this.log("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FileUploadLogger", {
      context: this.context,
      platform: this.platform,
      userAgent: navigator.userAgent,
      timestamp: new Date().toISOString(),
    });
  }

  detectPlatform() {
    const userAgent = navigator.userAgent;
    const isAndroid = /Android/.test(userAgent);
    const isIOS = /iPhone|iPad/.test(userAgent);
    const isTelegramMiniApp = window.Telegram && window.Telegram.WebApp;

    return {
      isAndroid,
      isIOS,
      isTelegramMiniApp,
      userAgent,
      webViewVersion: this.extractWebViewVersion(userAgent),
    };
  }

  extractWebViewVersion(userAgent) {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–µ—Ä—Å–∏—é WebView –¥–ª—è Android
    const webViewMatch = userAgent.match(/Chrome\/(\d+\.\d+\.\d+\.\d+)/);
    const androidMatch = userAgent.match(/Android (\d+\.\d+)/);

    return {
      chrome: webViewMatch ? webViewMatch[1] : "unknown",
      android: androidMatch ? androidMatch[1] : "unknown",
    };
  }

  log(message, data = {}) {
    const timestamp = Date.now() - this.startTime;
    const logEntry = {
      timestamp,
      message,
      data,
      platform: this.platform.isAndroid
        ? "Android"
        : this.platform.isIOS
        ? "iOS"
        : "Other",
    };

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –º–∞—Å—Å–∏–≤ —Å–æ–±—ã—Ç–∏–π
    this.events.push(logEntry);

    // –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å —Å —Ü–≤–µ—Ç–æ–≤–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π
    const prefix = this.platform.isAndroid
      ? "ü§ñ [ANDROID]"
      : this.platform.isIOS
      ? "üçé [iOS]"
      : "üíª [OTHER]";

    console.log(`${prefix} [${timestamp}ms] ${message}`, data);
  }

  logEvent(eventName, element, eventData = {}) {
    this.log(`üìÖ –°–æ–±—ã—Ç–∏–µ: ${eventName}`, {
      element: element
        ? {
            tagName: element.tagName,
            id: element.id,
            className: element.className,
            type: element.type,
          }
        : null,
      eventData,
      filesCount: element && element.files ? element.files.length : 0,
    });
  }

  logFileSelection(files, source = "unknown") {
    const fileDetails = files
      ? Array.from(files).map((file) => ({
          name: file.name,
          size: file.size,
          type: file.type,
          lastModified: file.lastModified,
        }))
      : [];

    this.log(`üìÇ –í—ã–±–æ—Ä —Ñ–∞–π–ª–æ–≤ –∏–∑: ${source}`, {
      filesCount: files ? files.length : 0,
      files: fileDetails,
      totalSize: fileDetails.reduce((sum, file) => sum + file.size, 0),
    });
  }

  logFileListUpdate(before, after, operation = "unknown") {
    this.log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤: ${operation}`, {
      before: {
        count: before.length,
        names: before.map((f) => f.name),
      },
      after: {
        count: after.length,
        names: after.map((f) => f.name),
      },
      operation,
    });
  }

  logElementState(element, stateName) {
    if (!element) {
      this.log(`‚ùå –≠–ª–µ–º–µ–Ω—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: ${stateName}`);
      return;
    }

    const state = {
      exists: !!element,
      visible: element.offsetParent !== null,
      disabled: element.disabled,
      readonly: element.readOnly,
      value: element.value,
      filesCount: element.files ? element.files.length : 0,
      accept: element.accept,
      multiple: element.multiple,
      style: {
        display: getComputedStyle(element).display,
        visibility: getComputedStyle(element).visibility,
        opacity: getComputedStyle(element).opacity,
      },
    };

    this.log(`üîç –°–æ—Å—Ç–æ—è–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ (${stateName}):`, state);
  }

  logDataTransferOperation(operation, files, success = true, error = null) {
    this.log(`üîÄ DataTransfer –æ–ø–µ—Ä–∞—Ü–∏—è: ${operation}`, {
      operation,
      filesCount: files ? files.length : 0,
      success,
      error: error ? error.message : null,
      supportsDataTransfer: "DataTransfer" in window,
    });
  }

  logAndroidSpecific(action, data = {}) {
    if (!this.platform.isAndroid) return;

    this.log(`ü§ñ Android —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ: ${action}`, {
      ...data,
      webViewVersion: this.platform.webViewVersion,
      hasTouchEvents: "ontouchstart" in window,
      hasFileAPI: "File" in window && "FileList" in window,
      hasDataTransfer: "DataTransfer" in window,
    });
  }

  logIOSSpecific(action, data = {}) {
    if (!this.platform.isIOS) return;

    this.log(`üçé iOS —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ: ${action}`, {
      ...data,
      isTelegramWebApp: this.platform.isTelegramMiniApp,
      hasFileAPI: "File" in window && "FileList" in window,
      hasDataTransfer: "DataTransfer" in window,
    });
  }

  logError(error, context = "general") {
    this.log(`‚ùå –û—à–∏–±–∫–∞ –≤ ${context}:`, {
      message: error.message,
      stack: error.stack,
      name: error.name,
      context,
    });
  }

  logTiming(operation, startTime, endTime = Date.now()) {
    const duration = endTime - startTime;
    this.log(`‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è ${operation}: ${duration}ms`);
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –æ —Å–æ–±—ã—Ç–∏—è—Ö
  getReport() {
    return {
      platform: this.platform,
      totalEvents: this.events.length,
      duration: Date.now() - this.startTime,
      events: this.events,
      summary: this.generateSummary(),
    };
  }

  generateSummary() {
    const eventTypes = {};
    this.events.forEach((event) => {
      const type = event.message.split(":")[0];
      eventTypes[type] = (eventTypes[type] || 0) + 1;
    });

    return {
      eventTypes,
      hasErrors: this.events.some((e) => e.message.includes("‚ùå")),
      hasFileSelection: this.events.some((e) => e.message.includes("üìÇ")),
      hasDataTransferOps: this.events.some((e) => e.message.includes("üîÄ")),
    };
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –ª–æ–≥–æ–≤ (–¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É)
  exportLogs() {
    const report = this.getReport();
    const exportData = {
      timestamp: new Date().toISOString(),
      userAgent: navigator.userAgent,
      ...report,
    };

    console.log("üìä –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –æ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–æ–≤:", exportData);
    return JSON.stringify(exportData, null, 2);
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ —Å–ø–æ—Å–æ–±–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ –Ω–∞ Android
  createAndroidFileUploadFallback(container, fileInput, onFilesSelected) {
    if (!this.platform.isAndroid) return null;

    this.log("ü§ñ –°–æ–∑–¥–∞–Ω–∏–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ —Å–ø–æ—Å–æ–±–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è Android");

    // –°–æ–∑–¥–∞–µ–º –≤–∏–¥–∏–º—É—é –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–ª–∏–∫–∞
    const fallbackButton = document.createElement("button");
    fallbackButton.type = "button";
    fallbackButton.className = "btn btn-outline-primary btn-sm mt-2";
    fallbackButton.innerHTML = "üìÅ –í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª—ã (Android)";
    fallbackButton.style.display = "block";
    fallbackButton.style.width = "100%";

    // –°–æ–∑–¥–∞–µ–º —Å–∫—Ä—ã—Ç—ã–π input –¥–ª—è —ç—Ç–æ–π –∫–Ω–æ–ø–∫–∏
    const hiddenInput = document.createElement("input");
    hiddenInput.type = "file";
    hiddenInput.accept = fileInput.accept;
    hiddenInput.multiple = fileInput.multiple;
    hiddenInput.style.display = "none";

    hiddenInput.addEventListener("change", (e) => {
      this.logAndroidSpecific("–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞: —Ñ–∞–π–ª—ã –≤—ã–±—Ä–∞–Ω—ã", {
        filesCount: e.target.files ? e.target.files.length : 0,
      });

      if (e.target.files && e.target.files.length > 0) {
        onFilesSelected(e.target.files);
      }
    });

    fallbackButton.addEventListener("click", (e) => {
      e.preventDefault();
      this.logAndroidSpecific("–ö–ª–∏–∫ –ø–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–π –∫–Ω–æ–ø–∫–µ");
      hiddenInput.click();
    });

    // –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    container.appendChild(hiddenInput);
    container.appendChild(fallbackButton);

    this.log("‚úÖ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–∑–¥–∞–Ω–∞");

    return {
      button: fallbackButton,
      input: hiddenInput,
      remove: () => {
        container.removeChild(fallbackButton);
        container.removeChild(hiddenInput);
        this.log("üóëÔ∏è –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∞");
      },
    };
  }
}

export { FileUploadLogger };
